# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BracketStanding {
  last_match: Match
  rank: Int!
  team: Team!
}

type CodMw implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Csgo implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type DeletionObject {
  deleted_at: String!
  reason: String!
  videogame_id: ID!
}

type Dota2 implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Fifa implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Game {
  begin_at: String
  complete: Boolean
  detailed_stats: Boolean
  end_at: String
  finished: Boolean
  forfeit: Boolean
  id: ID
  length: Float
  position: Float
  status: GameStatus
  video_url: String
  winner_id: ID
  winner_type: OpponentType
}

enum GameStatus {
  finished
  not_played
  not_started
  running
}

type GroupStanding {
  losses: Int!
  rank: Int!
  team: Team!
  ties: Int!
  total: Int!
  wins: Int!
}

type Incident {
  change_type: IncidentChangeType!
  id: ID!
  modified_at: String!
  object: IncidentObject!
  type: IncidentType!
}

enum IncidentChangeType {
  creation
  deletion
  update
}

union IncidentObject = DeletionObject | League | Match | Player | Serie | Team | Tournament

enum IncidentType {
  league
  match
  player
  serie
  team
  tournament
}

type League {
  id: ID!
  image_url: String
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  modified_at: String
  name: String
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  url: String
  videogame: VideoGame!
}

input LeagueFilter {
  id: [ID!]
  modified_at: [String!]
  name: [String!]
  slug: [String!]
  url: [String!]
  videogame_id: [ID!]
}

input LeagueRange {
  id: [ID!]
  modified_at: [String!]
  name: [String!]
  slug: [String!]
  url: [String!]
  videogame_id: [ID!]
}

input LeagueSearch {
  name: String
  slug: String
  url: String
}

enum LeagueSort {
  id_asc
  id_desc
  modified_at_asc
  modified_at_desc
  name_asc
  name_desc
  slug_asc
  slug_desc
  url_asc
  url_desc
}

type Live {
  endpoints: [LiveEndpoint!]!
  match: Match!
}

type LiveEndpoint {
  begin_at: String
  expected_begin_at: String
  last_active: Int
  match_id: ID!
  open: Boolean!
  type: String!
  url: String!
}

type Lol implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Match {
  begin_at: String
  detailed_stats: Boolean
  draw: Boolean
  end_at: String
  forfeit: Boolean
  game_advantage: ID
  games: [Game!]
  id: ID!
  league: League
  live: MatchLive
  live_embed_url: String
  match_type: MatchType
  modified_at: String
  name: String
  number_of_games: Int
  official_stream_url: String
  opponents: [Opponent!]
  opponents_type: OpponentType
  original_scheduled_at: String
  rescheduled: Boolean
  results: [Result!]
  scheduled_at: String
  serie: Serie!
  slug: String
  status: MatchStatus
  streams: Streams
  tournament: Tournament
  videogame: VideoGame
  videogame_version: MatchVideoGameVersion
  winner: Opponent
}

input MatchFilter {
  begin_at: [String!]
  detailed_stats: Boolean
  draw: Boolean
  end_at: [String!]
  finished: Boolean
  forfeit: Boolean
  future: Boolean
  id: [ID!]
  league_id: ID
  match_type: [MatchType!]
  modified_at: [String!]
  name: [String!]
  not_started: Boolean
  number_of_games: [Int!]
  official_stream_url: String
  opponent_id: [ID!]
  past: Boolean
  running: Boolean
  scheduled_at: [String!]
  serie_id: ID
  slug: [String!]
  status: [MatchStatus!]
  tournament_id: ID
  unscheduled: Boolean
  winner_id: ID
  winner_type: OpponentType
}

type MatchLive {
  opens_at: String
  supported: String
  url: String
}

input MatchRange {
  begin_at: [String!]
  end_at: [String!]
  id: [ID!]
  league_id: [ID!]
  match_type: [MatchType!]
  modified_at: [String!]
  name: [String!]
  number_of_games: [Int!]
  scheduled_at: [String!]
  serie_id: [ID!]
  tournament_id: [ID!]
  winner_id: [ID!]
}

input MatchSearch {
  name: String
  slug: String
  status: String
}

enum MatchSort {
  begin_at_asc
  begin_at_desc
  detailed_stats_asc
  detailed_stats_desc
  draw_asc
  draw_desc
  end_at_asc
  end_at_desc
  forfeit_asc
  forfeit_desc
  id_asc
  id_desc
  match_type_asc
  match_type_desc
  modified_at_asc
  modified_at_desc
  name_asc
  name_desc
  number_of_games_asc
  number_of_games_desc
  scheduled_at_asc
  scheduled_at_desc
  slug_asc
  slug_desc
  status_asc
  status_desc
  tournament_id_asc
  tournament_id_desc
  winner_id_asc
  winner_id_desc
}

enum MatchStatus {
  canceled
  finished
  not_started
  postponed
  running
}

enum MatchType {
  best_of
  custom
  first_to
  ow_best_to
}

type MatchVideoGameVersion {
  current: Boolean
  name: String
}

union Opponent = Player | Team

enum OpponentType {
  player
  team
}

type Overwatch implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Player {
  birth_year: Float
  birthday: String
  current_team: Team
  current_videogame: VideoGame
  first_name: String
  hometown: String
  id: ID
  image_url: String
  last_name: String
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String
  nationality: String
  role: String
  slug: String
}

input PlayerFilter {
  birth_year: [Int!]
  birthday: [String!]
  first_name: [String!]
  hometown: [String!]
  id: [ID!]
  last_name: [String!]
  name: [String!]
  nationality: [String!]
  role: [String!]
  slug: [String!]
  team_id: [Int!]
  videogame_id: [Int!]
}

input PlayerRange {
  birth_year: [Int!]
  birthday: [String!]
  first_name: [String!]
  hometown: [String!]
  id: [ID!]
  last_name: [String!]
  name: [String!]
  nationality: [String!]
  role: [String!]
  slug: [String!]
  videogame_id: [Int!]
}

input PlayerSearch {
  birthday: String
  first_name: String
  hometown: String
  last_name: String
  name: String
  nationality: String
  role: String
  slug: String
}

enum PlayerSort {
  birth_year_asc
  birth_year_desc
  birthday_asc
  birthday_desc
  first_name_asc
  first_name_desc
  hometown_asc
  hometown_desc
  id_asc
  id_desc
  last_name_asc
  last_name_desc
  name_asc
  name_desc
  nationality_asc
  nationality_desc
  role_asc
  role_desc
  slug_asc
  slug_desc
  team_id_asc
  team_id_desc
  videogame_id_asc
  videogame_id_desc
}

type Pubg implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Query {
  codmw: CodMw!
  csgo: Csgo!
  dota2: Dota2!
  fifa: Fifa!
  incidents(change_type: IncidentChangeType, page: Int, per_page: Int, since: String, type: IncidentType, videogame: [ID!]): [Incident!]!
  league(id: Float, slug: String): League
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  lives(page: Int, per_page: Int): [Live!]!
  lol: Lol!
  match(id: Float, slug: String): Match!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  overwatch: Overwatch!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  player(id: Float, slug: String): Player
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  pubg: Pubg!
  r6siege: R6Siege!
  rocketleague: RocketLeague!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  serie(id: Float, slug: String): Serie
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  team(id: Float, slug: String): Team
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournament(id: Float, slug: String): Tournament
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  videogame(id: Float, slug: String): VideoGame
  videogames: [VideoGame!]!
}

type R6Siege implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Result {
  id: ID!
  score: Int!
}

type RocketLeague implements VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

type Serie {
  begin_at: String
  description: String
  end_at: String
  full_name: String
  id: ID!
  league: League!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  modified_at: String
  name: String
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  season: String
  slug: String
  tier: String
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  videogame: VideoGame!
  winner_id: ID
  winner_type: OpponentType
  year: Int
}

input SerieFilter {
  begin_at: [String!]
  description: [String!]
  end_at: [String!]
  id: ID
  league_id: ID
  modified_at: [String!]
  name: [String!]
  season: [String!]
  slug: [String!]
  tier: [String!]
  winner_id: ID
  winner_type: [OpponentType!]
  year: Int
}

input SerieRange {
  begin_at: [String!]
  description: [String!]
  end_at: [String!]
  id: [ID!]
  league_id: [ID!]
  modified_at: [String!]
  name: [String!]
  season: [String!]
  slug: [String!]
  tier: [String!]
  winner_id: [ID!]
  winner_type: [OpponentType!]
  year: [Int!]
}

input SerieSearch {
  description: String
  name: String
  season: String
  slug: String
  tier: String
}

enum SerieSort {
  begin_at_asc
  begin_at_desc
  description_asc
  description_desc
  end_at_asc
  end_at_desc
  id_asc
  id_desc
  league_id_asc
  league_id_desc
  modified_at_asc
  modified_at_desc
  name_asc
  name_desc
  season_asc
  season_desc
  slug_asc
  slug_desc
  tier_asc
  tier_desc
  winner_id_asc
  winner_id_desc
  winner_type_asc
  winner_type_desc
  year_asc
  year_desc
}

union Standing = BracketStanding | GroupStanding

type Stream {
  embed_url: String
  raw_url: String
}

type Streams {
  english: Stream
  russian: Stream
}

type Team {
  acronym: String
  current_videogame: VideoGame
  id: ID!
  image_url: String
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  location: String
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  modified_at: String
  name: String
  players: [Player!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}

input TeamFilter {
  acronym: [String!]
  id: [ID!]
  location: [String!]
  modified_at: [String!]
  name: [String!]
  slug: [String!]
  videogame_id: [ID!]
}

input TeamRange {
  acronym: [String!]
  id: [ID!]
  location: [String!]
  modified_at: [String!]
  name: [String!]
  slug: [String!]
  videogame_id: [ID!]
}

input TeamSearch {
  acronym: String
  name: String
  slug: String
  url: String
}

enum TeamSort {
  acronym_asc
  acronym_desc
  id_asc
  id_desc
  location_asc
  location_desc
  modified_at_asc
  modified_at_desc
  name_asc
  name_desc
  slug_asc
  slug_desc
  videogame_id_asc
  videogame_id_desc
}

type Tournament {
  begin_at: String
  end_at: String
  id: ID!
  league: League!
  live_supported: Boolean
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  modified_at: String
  name: String
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  prizepool: String
  rosters: [Opponent!]!
  serie: Serie!
  slug: String
  standings(page: Int, per_page: Int): [Standing!]!
  videogame: VideoGame!
  winner_id: ID
  winner_type: OpponentType
}

input TournamentFilter {
  begin_at: [String!]
  end_at: [String!]
  id: [ID!]
  league_id: [ID!]
  live_supported: Boolean
  modified_at: [String!]
  name: [String!]
  prizepool: [String!]
  serie_id: [ID!]
  slug: [String!]
  videogame_id: [ID!]
  winner_id: [ID!]
  winner_type: [OpponentType!]
}

input TournamentRange {
  begin_at: [String!]
  end_at: [String!]
  id: [ID!]
  league_id: [ID!]
  modified_at: [String!]
  name: [String!]
  prizepool: [String!]
  serie_id: [ID!]
  slug: [String!]
  videogame_id: [ID!]
  winner_id: [ID!]
}

input TournamentSearch {
  name: [String!]
  prizepool: [String!]
  slug: [String!]
}

enum TournamentSort {
  begin_at_asc
  begin_at_desc
  end_at_asc
  end_at_desc
  id_asc
  id_desc
  modified_at_asc
  modified_at_desc
  name_asc
  name_desc
  prizepool_asc
  prizepool_desc
  serie_id_asc
  serie_id_desc
  slug_asc
  slug_desc
  winner_id_asc
  winner_id_desc
  winner_type_asc
  winner_type_desc
}

interface VideoGame {
  current_version: String
  id: ID!
  leagues(filter: LeagueFilter, page: Int, per_page: Int, range: LeagueRange, search: LeagueSearch, sort: [LeagueSort!]): [League!]!
  matches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  name: String!
  pastMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  pastSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  pastTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  players(filter: PlayerFilter, page: Int, per_page: Int, range: PlayerRange, search: PlayerSearch, sort: [PlayerSort!]): [Player!]!
  runningMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  runningSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  runningTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  series(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  slug: String!
  teams(filter: TeamFilter, page: Int, per_page: Int, range: TeamRange, search: TeamSearch, sort: [TeamSort!]): [Team!]!
  tournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
  upcomingMatches(filter: MatchFilter, page: Int, per_page: Int, range: MatchRange, search: MatchSearch, sort: [MatchSort!]): [Match!]!
  upcomingSeries(filter: SerieFilter, page: Int, per_page: Int, range: SerieRange, search: SerieSearch, sort: [SerieSort!]): [Serie!]!
  upcomingTournaments(filter: TournamentFilter, page: Int, per_page: Int, range: TournamentRange, search: TournamentSearch, sort: [TournamentSort!]): [Tournament!]!
}
